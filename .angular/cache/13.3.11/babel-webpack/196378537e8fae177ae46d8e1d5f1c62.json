{"ast":null,"code":"import _classCallCheck from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _possibleConstructorReturn from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\isNativeReflectConstruct.js\";\nimport _get from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\n/**\r\n * DevExtreme (esm/ui/drop_down_editor/ui.drop_down_button.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport messageLocalization from \"../../localization/message\";\nimport TextEditorButton from \"../text_box/texteditor_button_collection/button\";\nimport Button from \"../button\";\nvar DROP_DOWN_EDITOR_BUTTON_CLASS = \"dx-dropdowneditor-button\";\nvar DROP_DOWN_EDITOR_BUTTON_VISIBLE = \"dx-dropdowneditor-button-visible\";\nvar BUTTON_MESSAGE = \"dxDropDownEditor-selectLabel\";\n\nvar DropDownButton = /*#__PURE__*/function (_TextEditorButton) {\n  _inherits(DropDownButton, _TextEditorButton);\n\n  function DropDownButton(name, editor, options) {\n    var _this;\n\n    _classCallCheck(this, DropDownButton);\n\n    _this = _callSuper(this, DropDownButton, [name, editor, options]);\n    _this.currentTemplate = null;\n    return _this;\n  }\n\n  _createClass(DropDownButton, [{\n    key: \"_attachEvents\",\n    value: function _attachEvents(instance) {\n      var editor = this.editor;\n      instance.option(\"onClick\", function (e) {\n        !editor.option(\"openOnFieldClick\") && editor._openHandler(e);\n      });\n      eventsEngine.on(instance.$element(), \"mousedown\", function (e) {\n        if (editor.$element().is(\".dx-state-focused\")) {\n          e.preventDefault();\n        }\n      });\n    }\n  }, {\n    key: \"_create\",\n    value: function _create() {\n      var editor = this.editor;\n      var $element = $(\"<div>\");\n\n      var options = this._getOptions();\n\n      this._addToContainer($element);\n\n      var instance = editor._createComponent($element, Button, extend({}, options, {\n        elementAttr: {\n          \"aria-label\": messageLocalization.format(BUTTON_MESSAGE)\n        }\n      }));\n\n      this._legacyRender(editor.$element(), $element, options.visible);\n\n      return {\n        $element: $element,\n        instance: instance\n      };\n    }\n  }, {\n    key: \"_getOptions\",\n    value: function _getOptions() {\n      var editor = this.editor;\n\n      var visible = this._isVisible();\n\n      var isReadOnly = editor.option(\"readOnly\");\n      var options = {\n        focusStateEnabled: false,\n        hoverStateEnabled: false,\n        activeStateEnabled: false,\n        useInkRipple: false,\n        disabled: isReadOnly,\n        visible: visible\n      };\n\n      this._addTemplate(options);\n\n      return options;\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      var editor = this.editor;\n      return _get(_getPrototypeOf(DropDownButton.prototype), \"_isVisible\", this).call(this) && editor.option(\"showDropDownButton\");\n    }\n  }, {\n    key: \"_legacyRender\",\n    value: function _legacyRender($editor, $element, isVisible) {\n      $editor.toggleClass(DROP_DOWN_EDITOR_BUTTON_VISIBLE, isVisible);\n\n      if ($element) {\n        $element.removeClass(\"dx-button\").addClass(DROP_DOWN_EDITOR_BUTTON_CLASS);\n      }\n    }\n  }, {\n    key: \"_isSameTemplate\",\n    value: function _isSameTemplate() {\n      return this.editor.option(\"dropDownButtonTemplate\") === this.currentTemplate;\n    }\n  }, {\n    key: \"_addTemplate\",\n    value: function _addTemplate(options) {\n      if (!this._isSameTemplate()) {\n        options.template = this.editor._getTemplateByOption(\"dropDownButtonTemplate\");\n        this.currentTemplate = this.editor.option(\"dropDownButtonTemplate\");\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var shouldUpdate = _get(_getPrototypeOf(DropDownButton.prototype), \"update\", this).call(this);\n\n      if (shouldUpdate) {\n        var editor = this.editor,\n            instance = this.instance;\n        var $editor = editor.$element();\n\n        var options = this._getOptions();\n\n        null === instance || void 0 === instance ? void 0 : instance.option(options);\n\n        this._legacyRender($editor, null === instance || void 0 === instance ? void 0 : instance.$element(), options.visible);\n      }\n    }\n  }]);\n\n  return DropDownButton;\n}(TextEditorButton);\n\nexport { DropDownButton as default };","map":null,"metadata":{},"sourceType":"module"}