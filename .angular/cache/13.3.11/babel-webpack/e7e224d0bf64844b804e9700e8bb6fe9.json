{"ast":null,"code":"import _classCallCheck from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _possibleConstructorReturn from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\isNativeReflectConstruct.js\";\nimport _getPrototypeOf from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\Workdir\\\\JOSE HERNANDEZ\\\\black-dashboard-pro-angular-v1.3.0\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\n/**\r\n * DevExtreme (esm/core/templates/bindable_template.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../renderer\";\nimport { TemplateBase } from \"./template_base\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { removeEvent } from \"../../events/remove\";\nimport { isPrimitive } from \"../utils/type\";\n\nvar watchChanges = function watchChanges(rawData, watchMethod, fields, fieldsMap, callback) {\n  var fieldsDispose;\n\n  var globalDispose = function (data, watchMethod, callback) {\n    return watchMethod(function () {\n      return data;\n    }, callback);\n  }(rawData, watchMethod, function (dataWithRawFields) {\n    fieldsDispose && fieldsDispose();\n\n    if (isPrimitive(dataWithRawFields)) {\n      callback(dataWithRawFields);\n      return;\n    }\n\n    fieldsDispose = function (data, watchMethod, fields, fieldsMap, callback) {\n      var resolvedData = {};\n      var missedFields = fields.slice();\n      var watchHandlers = fields.map(function (name) {\n        var fieldGetter = fieldsMap[name];\n        return watchMethod(fieldGetter ? function () {\n          return fieldGetter(data);\n        } : function () {\n          return data[name];\n        }, function (value) {\n          resolvedData[name] = value;\n\n          if (missedFields.length) {\n            var index = missedFields.indexOf(name);\n\n            if (index >= 0) {\n              missedFields.splice(index, 1);\n            }\n          }\n\n          if (!missedFields.length) {\n            callback(resolvedData);\n          }\n        });\n      });\n      return function () {\n        watchHandlers.forEach(function (dispose) {\n          return dispose();\n        });\n      };\n    }(dataWithRawFields, watchMethod, fields, fieldsMap, callback);\n  });\n\n  return function () {\n    fieldsDispose && fieldsDispose();\n    globalDispose && globalDispose();\n  };\n};\n\nexport var BindableTemplate = /*#__PURE__*/function (_TemplateBase) {\n  _inherits(BindableTemplate, _TemplateBase);\n\n  function BindableTemplate(render, fields, watchMethod, fieldsMap) {\n    var _this;\n\n    _classCallCheck(this, BindableTemplate);\n\n    _this = _callSuper(this, BindableTemplate);\n    _this._render = render;\n    _this._fields = fields;\n    _this._fieldsMap = fieldsMap || {};\n    _this._watchMethod = watchMethod;\n    return _this;\n  }\n\n  _createClass(BindableTemplate, [{\n    key: \"_renderCore\",\n    value: function _renderCore(options) {\n      var _this2 = this;\n\n      var $container = $(options.container);\n      var dispose = watchChanges(options.model, this._watchMethod, this._fields, this._fieldsMap, function (data) {\n        $container.empty();\n\n        _this2._render($container, data, options.model);\n      });\n      eventsEngine.on($container, removeEvent, dispose);\n      return $container.contents();\n    }\n  }]);\n\n  return BindableTemplate;\n}(TemplateBase);","map":null,"metadata":{},"sourceType":"module"}